{
  "_args": [
    [
      "its@~1.0.0",
      "/Users/pulkitgupta/nodelab2/node_modules/json-over-tcp"
    ]
  ],
  "_from": "its@>=1.0.0 <1.1.0",
  "_id": "its@1.0.2",
  "_inCache": true,
  "_installable": true,
  "_location": "/its",
  "_npmUser": {
    "email": "ozanturgut@gmail.com",
    "name": "ozanturgut"
  },
  "_npmVersion": "1.2.2",
  "_phantomChildren": {},
  "_requested": {
    "name": "its",
    "raw": "its@~1.0.0",
    "rawSpec": "~1.0.0",
    "scope": null,
    "spec": ">=1.0.0 <1.1.0",
    "type": "range"
  },
  "_requiredBy": [
    "/json-over-tcp"
  ],
  "_resolved": "https://registry.npmjs.org/its/-/its-1.0.2.tgz",
  "_shasum": "423f45bba995a59c68d1ecf8e848dc10891b4cd2",
  "_shrinkwrap": null,
  "_spec": "its@~1.0.0",
  "_where": "/Users/pulkitgupta/nodelab2/node_modules/json-over-tcp",
  "author": {
    "email": "ozanturgut@gmail.com",
    "name": "Ozan Turgut"
  },
  "bugs": {
    "url": "https://github.com/ozanturgut/its/issues"
  },
  "contributors": [
    {
      "name": "Ozan Turgut",
      "email": "ozanturgut@gmail.com"
    },
    {
      "name": "tv",
      "email": "tv@shackspace.de"
    }
  ],
  "dependencies": {},
  "description": "Preconditions for safe coding",
  "devDependencies": {
    "grunt": "~0.3.15",
    "grunt-contrib-clean": "~0.3.1",
    "grunt-hug": "~0.4.0"
  },
  "directories": {},
  "dist": {
    "shasum": "423f45bba995a59c68d1ecf8e848dc10891b4cd2",
    "tarball": "http://registry.npmjs.org/its/-/its-1.0.2.tgz"
  },
  "homepage": "https://github.com/ozanturgut/its#readme",
  "keywords": [
    "assert",
    "assertion",
    "is",
    "it",
    "its",
    "precondition",
    "test"
  ],
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "main": "index.js",
  "maintainers": [
    {
      "name": "ozanturgut",
      "email": "ozanturgut@gmail.com"
    }
  ],
  "name": "its",
  "optionalDependencies": {},
  "readme": "# its [![Build Status](https://secure.travis-ci.org/ozanturgut/its.png?branch=master)](http://travis-ci.org/ozanturgut/its)\r\n\r\nIts a utility to simplify common precondition or state checking. It's useful for signaling\r\nto calling methods when they've made invalid calls to a method.\r\n\r\n## Usage\r\nThere are four available functions:\r\n* `its(expression [, errorType] [, messageTemplate [, messageArgs...]])` for throwing custom errors\r\n* `its.defined(expression [, messageTemplate [, messageArgs...]])` for throwing reference errors\r\n* `its.range(expression [, messageTemplate [, messageArgs...]])` for throwing range errors\r\n* `its.type(expression [, messageTemplate [, messageArgs...]])` for throwing type errors\r\n    * `its.undefined(obj [, messageTemplate [, messageArgs...]])` for throwing type errors\r\n    * `its.null(obj [, messageTemplate [, messageArgs...]])` for throwing type errors\r\n    * `its.boolean(obj [, messageTemplate [, messageArgs...]])` for throwing type errors\r\n    * `its.array(obj [, messageTemplate [, messageArgs...]])` for throwing type errors\r\n    * `its.object(obj [, messageTemplate [, messageArgs...]])` for throwing type errors\r\n    * `its.func(obj [, messageTemplate [, messageArgs...]])` for throwing type errors\r\n    * `its.args(obj [, messageTemplate [, messageArgs...]])` for throwing type errors\r\n    * `its.string(obj [, messageTemplate [, messageArgs...]])` for throwing type errors\r\n    * `its.number(obj [, messageTemplate [, messageArgs...]])` for throwing type errors\r\n    * `its.date(obj [, messageTemplate [, messageArgs...]])` for throwing type errors\r\n    * `its.regexp(obj [, messageTemplate [, messageArgs...]])` for throwing type errors\r\n\r\n`expression` is a boolean value which determines whether the precondition will throw an error or not.\r\n\r\n`messageTemplate` is a message with 0 or more '%s' placeholders for message arguments\r\n\r\n`messageArgs` is a variable argument (0 or more) to fill the placeholders in the message template\r\n\r\n`errorType` is used for throwing custom error objects. These objects should inherit from `Error`.\r\n\r\n## Examples\r\n```javascript\r\n// Things that should pass\r\nits.string('hi'); // returns true\r\nits.func(function(){}); // returns true\r\nits.date(new Date); //returns true\r\nits.defined(\"anything\"); // returns \"anything\"\r\nits.type(typeof \"something\" === \"string\"); // returns true\r\nits.range(1 < 2 && 1 > 0); // returns true\r\nits(1 === 1); // returns true\r\nits(1 === 1, ReferenceError); // throws true\r\n\r\n// Things that shouldn't pass\r\nits.defined(void 0); // throws ReferenceError\r\nits.type(typeof \"something\" === \"number\"); // throws TypeError\r\nits.range(1 < 2 && 1 > 2); // throws RangeError\r\nits(1 !== 1); // throws Error\r\nits(1 === void 0, ReferenceError); // throws ReferenceError\r\n\r\n// Messages\r\nits.defined(void 0, \"This doesn't look right.\"); // throws ReferenceError with a message of \"This doesn't look right.\"\r\nits.defined(void 0, \"This doesn't look %s.\", \"right\"); // throws ReferenceError with a message of \"This doesn't look right.\"\r\nits.defined(void 0, \"%s doesn't look %s.\", \"This\", \"right\"); // throws ReferenceError with a message of \"This doesn't look right.\"\r\n\r\n// What real use may look like\r\nvar addOnlyNumbersBelow100 = function(number1, number2){\r\n\tits.number(number1);\r\n\tits.number(number2);\r\n\tits.range(number1 < 100);\r\n\tits.range(number2 < 100);\r\n\treturn number1 + number2;\r\n};\r\n\r\naddOnlyNumbersBelow100(10, 20); // returns 30\r\naddOnlyNumbersBelow100(10, 338484); // throws RangeError\r\naddOnlyNumbersBelow100(\"10\", 338484); // throws TypeError\r\n```\r\n\r\n## Developing\r\nits uses grunt to build.\r\n* `grunt` - Builds the standard and minified version of precondition in the dist folder\r\n* `grunt test` - Builds precondition and runs unit tests (requires PhantomJS)\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ozanturgut/its.git"
  },
  "scripts": {
    "test": "grunt test"
  },
  "version": "1.0.2"
}
